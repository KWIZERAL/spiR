#  out <- subset(data_long, code %in% country & year %in% years & indicator %in% indicators)
out <- subset(data_long, grepl("country", code) & grepl("indicators", indicator) & ("years", year))
#  out <- subset(data_long, code %in% country & year %in% years & indicator %in% indicators)
out <- data_long[data_long$code == country & data_long$year == years & data_long$indicator == indicators,]
# Function 1: Data collection
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
data_long <- reshape2::melt(SPI_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("countryName", "code", "year"),
# The source columns
measure.vars = colnames(SPI_data)[6:ncol(SPI_data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "indicator",
value.name = "value"
)
# Creating the default values for the function query
data_long_country <- unique(data_long[, 2])
data_long_year <- unique(data_long[, 3])
data_long_indicator <- unique(data_long[, 4])
sqs_spi_data <- function(country = data_long_country, years = data_long_year, indicators = data_long_indicator) {
#  out <- subset(data_long, code %in% country & year %in% years & indicator %in% indicators)
out <- data_long[data_long$code == country & data_long$year == years & data_long$indicator == indicators,]
return(out)
}
sqs_spi_data(country = c("USA", "FRA"), years = "2018", )
View(data_long)
sqs_spi_data(country = c("USA", "FRA"), year = c("2018", "2019"), indicators = "SPI")
sqs_spi_data("USA", "2019", c("SPI", "FOW"))
# Function 1: Data collection
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
data_long <- reshape2::melt(SPI_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("countryName", "code", "year"),
# The source columns
measure.vars = colnames(SPI_data)[6:ncol(SPI_data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "indicator",
value.name = "value"
)
# Creating the default values for the function query
data_long_country <- unique(data_long[, 2])
data_long_year <- unique(data_long[, 3])
data_long_indicator <- unique(data_long[, 4])
sqs_spi_data <- function(country = data_long_country, years = data_long_year, indicators = data_long_indicator) {
#  out <- subset(data_long, code %in% country & year %in% years & indicator %in% indicators)
out <- data_long[data_long$code == country | data_long$year == years | data_long$indicator == indicators,]
return(out)
}
sqs_spi_data(country = c("USA", "FRA"), years = "2018", )
sqs_spi_data(, "2018", )
# Function 1: Data collection
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
data_long <- reshape2::melt(SPI_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("countryName", "code", "year"),
# The source columns
measure.vars = colnames(SPI_data)[6:ncol(SPI_data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "indicator",
value.name = "value"
)
# Creating the default values for the function query
data_long_country <- unique(data_long[, 2])
data_long_year <- unique(data_long[, 3])
data_long_indicator <- unique(data_long[, 4])
sqs_spi_data <- function(country = data_long_country, years = data_long_year, indicators = data_long_indicator) {
#  out <- subset(data_long, code %in% country & year %in% years & indicator %in% indicators)
out <- data_long[data_long$code == "country" & data_long$year == "years" & data_long$indicator == "indicators",]
return(out)
}
# Function 2: Indicators' symbols reconciliation
sqs_spi_symbol <- function(indicators) {
SPI_Indicators <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=400714513")
if (missing(indicators)) {
SPI_Indicators
} else {
SPI_Indicators[grep(indicators, SPI_Indicators$indicator_name), ]
}
}
sqs_spi_data(country = c("USA", "FRA"), years = "2018", )
# Function 1: Data collection
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
data_long <- reshape2::melt(SPI_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("countryName", "code", "year"),
# The source columns
measure.vars = colnames(SPI_data)[6:ncol(SPI_data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "indicator",
value.name = "value"
)
# Creating the default values for the function query
data_long_country <- unique(data_long[, 2])
data_long_year <- unique(data_long[, 3])
data_long_indicator <- unique(data_long[, 4])
sqs_spi_data <- function(country = data_long_country, years = data_long_year, indicators = data_long_indicator) {
#  out <- subset(data_long, code %in% country & year %in% years & indicator %in% indicators)
out <- data_long[data_long$code == "country" & data_long$year == years & data_long$indicator == "indicators",]
return(out)
}
# Function 2: Indicators' symbols reconciliation
sqs_spi_symbol <- function(indicators) {
SPI_Indicators <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=400714513")
if (missing(indicators)) {
SPI_Indicators
} else {
SPI_Indicators[grep(indicators, SPI_Indicators$indicator_name), ]
}
}
sqs_spi_data(country = c("USA", "FRA"), years = "2018", )
# Function 1: Data collection
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
data_long <- reshape2::melt(SPI_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("countryName", "code", "year"),
# The source columns
measure.vars = colnames(SPI_data)[6:ncol(SPI_data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "indicator",
value.name = "value"
)
# Creating the default values for the function query
data_long_country <- unique(data_long[, 2])
data_long_year <- unique(data_long[, 3])
data_long_indicator <- unique(data_long[, 4])
sqs_spi_data <- function(country = data_long_country, years = data_long_year, indicators = data_long_indicator) {
#  out <- subset(data_long, code %in% country & year %in% years & indicator %in% indicators)
out <- data_long[data_long$code == as.factor(country) & data_long$year == as.numeric(years) & data_long$indicator == as.factor(indicators),]
return(out)
}
sqs_spi_data(country = c("USA", "FRA"), years = "2018", )
sqs_spi_data(country = c("USA", "FRA"), year = c("2018", "2019"), indicators = "SPI")
sqs_spi_data(, "2018", )
sqs_spi_data("USA", , )
# Function 1: Data collection
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
data_long <- reshape2::melt(SPI_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("countryName", "code", "year"),
# The source columns
measure.vars = colnames(SPI_data)[6:ncol(SPI_data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "indicator",
value.name = "value"
)
# Creating the default values for the function query
data_long_country <- unique(data_long[, 2])
data_long_year <- unique(data_long[, 3])
data_long_indicator <- unique(data_long[, 4])
sqs_spi_data <- function(country = data_long_country, years = data_long_year, indicators = data_long_indicator) {
#  out <- subset(data_long, code %in% country & year %in% years & indicator %in% indicators)
out <- filter(data_long,
code == "country", year == years,
indicator == "indicators")
return(out)
}
sqs_spi_data(country = c("USA", "FRA"), years = "2018", )
# Function 1: Data collection
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
data_long <- reshape2::melt(SPI_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("countryName", "code", "year"),
# The source columns
measure.vars = colnames(SPI_data)[6:ncol(SPI_data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "indicator",
value.name = "value"
)
# Creating the default values for the function query
data_long_country <- unique(data_long[, 2])
data_long_year <- unique(data_long[, 3])
data_long_indicator <- unique(data_long[, 4])
sqs_spi_data <- function(country = data_long_country, years = data_long_year, indicators = data_long_indicator) {
#  out <- subset(data_long, code %in% country & year %in% years & indicator %in% indicators)
out <- filter(data_long,
code == "country", year == "years",
indicator == "indicators")
return(out)
}
sqs_spi_data(country = c("USA", "FRA"), years = "2018", )
# Function 1: Data collection
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
data_long <- reshape2::melt(SPI_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("countryName", "code", "year"),
# The source columns
measure.vars = colnames(SPI_data)[6:ncol(SPI_data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "indicator",
value.name = "value"
)
# Creating the default values for the function query
data_long_country <- unique(data_long[, 2])
data_long_year <- unique(data_long[, 3])
data_long_indicator <- unique(data_long[, 4])
sqs_spi_data <- function(country = data_long_country, years = data_long_year, indicators = data_long_indicator) {
#  out <- subset(data_long, code %in% country & year %in% years & indicator %in% indicators)
out <- dplyr::filter(data_long,
code == "country", year == "years",
indicator == "indicators")
return(out)
}
sqs_spi_data(country = c("USA", "FRA"), years = "2018", )
# Function 1: Data collection
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
data_long <- reshape2::melt(SPI_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("countryName", "code", "year"),
# The source columns
measure.vars = colnames(SPI_data)[6:ncol(SPI_data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "indicator",
value.name = "value"
)
# Creating the default values for the function query
data_long_country <- unique(data_long[, 2])
data_long_year <- unique(data_long[, 3])
data_long_indicator <- unique(data_long[, 4])
sqs_spi_data <- function(country = data_long_country, years = data_long_year, indicators = data_long_indicator) {
#  out <- subset(data_long, code %in% country & year %in% years & indicator %in% indicators)
out <- dplyr::filter(data_long,
code == country & year == years &
indicator == indicators)
return(out)
}
sqs_spi_data(country = c("USA", "FRA"), years = "2018", )
sqs_spi_data("USA", "2019", c("SPI", "FOW"))
sqs_spi_data(, "2018", )
sqs_spi_data("USA", , )
# Function 1: Data collection
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
data_long <- reshape2::melt(SPI_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("countryName", "code", "year"),
# The source columns
measure.vars = colnames(SPI_data)[6:ncol(SPI_data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "indicator",
value.name = "value"
)
# Creating the default values for the function query
data_long_country <- unique(data_long[, 2])
data_long_year <- unique(data_long[, 3])
data_long_indicator <- unique(data_long[, 4])
sqs_spi_data <- function(country = data_long_country, years = data_long_year, indicators = data_long_indicator) {
out <- dplyr::filter(data_long, code %in% country, year %in% years, indicator %in% indicators)
return(out)
}
sqs_spi_data(country = c("USA", "FRA"), years = "2018", )
# Function 1: Data collection
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
data_long <- reshape2::melt(SPI_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("countryName", "code", "year"),
# The source columns
measure.vars = colnames(SPI_data)[6:ncol(SPI_data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "indicator",
value.name = "value"
)
# Creating the default values for the function query
data_long_country <- unique(data_long[, 2])
data_long_year <- unique(data_long[, 3])
data_long_indicator <- unique(data_long[, 4])
sqs_spi_data <- function(country = data_long_country, years = data_long_year, indicators = data_long_indicator) {
out <- dplyr::filter(data_long, code == country, year %in% years, indicator %in% indicators)
return(out)
}
sqs_spi_data(country = c("USA", "FRA"), years = "2018", )
# Function 1: Data collection
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
data_long <- reshape2::melt(SPI_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("countryName", "code", "year"),
# The source columns
measure.vars = colnames(SPI_data)[6:ncol(SPI_data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "indicator",
value.name = "value"
)
# Creating the default values for the function query
data_long_country <- unique(data_long[, 2])
data_long_year <- unique(data_long[, 3])
data_long_indicator <- unique(data_long[, 4])
sqs_spi_data <- function(country = data_long_country, years = data_long_year, indicators = data_long_indicator) {
out <- dplyr::filter(data_long, code == country, year == years, indicator %in% indicators)
return(out)
}
sqs_spi_data(country = c("USA", "FRA"), years = "2018", )
sqs_spi_data(, "2018", )
sqs_spi_data(, , )
sqs_spi_data()
sqs_spi_data("USA", "2017", )
# Function 1: Data collection
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
data_long <- reshape2::melt(SPI_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("countryName", "code", "year"),
# The source columns
measure.vars = colnames(SPI_data)[6:ncol(SPI_data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "indicator",
value.name = "value"
)
# Creating the default values for the function query
data_long_country <- unique(data_long[, 2])
data_long_year <- unique(data_long[, 3])
data_long_indicator <- unique(data_long[, 4])
sqs_spi_data <- function(country = data_long_country, years = data_long_year, indicators = data_long_indicator) {
out <- dplyr::filter(data_long, code == country, year == years, indicator == indicators)
return(out)
}
sqs_spi_data(country = c("USA", "FRA"), years = "2018", )
sqs_spi_data("USA", "2019", c("SPI", "FOW"))
# Function 1: Data collection
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
data_long <- reshape2::melt(SPI_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("countryName", "code", "year"),
# The source columns
measure.vars = colnames(SPI_data)[6:ncol(SPI_data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "indicator",
value.name = "value"
)
# Creating the default values for the function query
data_long_country <- unique(data_long[, 2])
data_long_year <- unique(data_long[, 3])
data_long_indicator <- unique(data_long[, 4])
sqs_spi_data <- function(country = data_long_country, years = data_long_year, indicators = data_long_indicator) {
out <- dplyr::filter(data_long, code == country, year == years, indicator %in% indicators)
return(out)
}
sqs_spi_data("USA", "2019", c("SPI", "FOW"))
# Function 1: Data collection
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
data_long <- reshape2::melt(SPI_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("countryName", "code", "year"),
# The source columns
measure.vars = colnames(SPI_data)[6:ncol(SPI_data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "indicator",
value.name = "value"
)
# Creating the default values for the function query
data_long_country <- unique(data_long[, 2])
data_long_year <- unique(data_long[, 3])
data_long_indicator <- unique(data_long[, 4])
sqs_spi_data <- function(country = data_long_country, years = data_long_year, indicators = data_long_indicator) {
out <- dplyr::filter(data_long, code == country, year == years, indicator == as.factor(indicators))
return(out)
}
sqs_spi_data(country = c("USA", "FRA"), years = "2018", )
sqs_spi_data("USA", "2019", c("SPI", "FOW"))
# Function 1: Data collection
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
data_long <- reshape2::melt(SPI_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("countryName", "code", "year"),
# The source columns
measure.vars = colnames(SPI_data)[6:ncol(SPI_data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "indicator",
value.name = "value"
)
# Creating the default values for the function query
data_long_country <- unique(data_long[, 2])
data_long_year <- unique(data_long[, 3])
data_long_indicator <- unique(data_long[, 4])
sqs_spi_data <- function(country = data_long_country, years = data_long_year, indicators = data_long_indicator) {
out <- dplyr::filter(data_long, code == country & year == years& indicator %in% indicators)
return(out)
}
# Function 2: Indicators' symbols reconciliation
sqs_spi_symbol <- function(indicators) {
SPI_Indicators <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=400714513")
if (missing(indicators)) {
SPI_Indicators
} else {
SPI_Indicators[grep(indicators, SPI_Indicators$indicator_name), ]
}
}
sqs_spi_data(country = c("USA", "FRA"), years = "2018", )
sqs_spi_data("USA", "2019", c("SPI", "FOW"))
sqs_spi_data("USA", "2017", )
# Function 1: Data collection
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
data_long <- reshape2::melt(SPI_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("countryName", "code", "year"),
# The source columns
measure.vars = colnames(SPI_data)[6:ncol(SPI_data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "indicator",
value.name = "value"
)
data_long$indicator <- as.factor(data_long$indicator)
# Creating the default values for the function query
data_long_country <- unique(data_long[, 2])
data_long_year <- unique(data_long[, 3])
data_long_indicator <- unique(data_long[, 4])
sqs_spi_data <- function(country = data_long_country, years = data_long_year, indicators = data_long_indicator) {
out <- dplyr::filter(data_long, code == country & year == years& indicator == indicators)
return(out)
}
sqs_spi_data(country = c("USA", "FRA"), years = "2018", )
sqs_spi_data("USA", "2019", c("SPI", "FOW"))
# Function 1: Data collection
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
data_long <- reshape2::melt(SPI_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("countryName", "code", "year"),
# The source columns
measure.vars = colnames(SPI_data)[6:ncol(SPI_data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "indicator",
value.name = "value"
)
# Creating the default values for the function query
data_long_country <- unique(data_long[, 2])
data_long_year <- unique(data_long[, 3])
data_long_indicator <- unique(data_long[, 4])
data_long_indicator <- as.factor(data_long_indicator)
sqs_spi_data <- function(country = data_long_country, years = data_long_year, indicators = data_long_indicator) {
out <- dplyr::filter(data_long, code == country & year == years & indicator == indicators)
return(out)
}
sqs_spi_data(country = c("USA", "FRA"), years = "2018", )
# Function 1: Data collection
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
data_long <- reshape2::melt(SPI_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("countryName", "code", "year"),
# The source columns
measure.vars = colnames(SPI_data)[6:ncol(SPI_data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "indicator",
value.name = "value"
)
# Creating the default values for the function query
data_long_country <- unique(data_long[, 2])
data_long_year <- unique(data_long[, 3])
data_long_indicator <- unique(data_long[, 4])
sqs_spi_data <- function(country = data_long_country, years = data_long_year, indicators = data_long_indicator) {
out <- dplyr::filter(data_long, code %in% country & year %in% years & indicator %in% indicators)
return(out)
}
sqs_spi_data(country = c("USA", "FRA"), years = "2018", )
sqs_spi_data(country = c("USA", "FRA"), year = c("2018", "2019"), indicators = "SPI")
sqs_spi_data("USA", "2019", c("SPI", "FOW"))
sqs_spi_country(country = "Canada")
# Function 1: Data collection
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
data_long <- reshape2::melt(SPI_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("countryName", "code", "year"),
# The source columns
measure.vars = colnames(SPI_data)[6:ncol(SPI_data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "indicator",
value.name = "value"
)
# Creating the default values for the function query
data_long_country <- unique(data_long[, 2])
data_long_year <- unique(data_long[, 3])
data_long_indicator <- unique(data_long[, 4])
sqs_spi_data <- function(country = data_long_country, years = data_long_year, indicators = data_long_indicator) {
out <- dplyr::filter(data_long, code %in% country & year %in% years & indicator %in% indicators)
return(out)
}
# Function 2: Indicators' symbols reconciliation
sqs_spi_symbol <- function(indicators) {
SPI_Indicators <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=400714513")
if (missing(indicators)) {
SPI_Indicators
} else {
SPI_Indicators[grep(indicators, SPI_Indicators$indicator_name), ]
}
}
# Function 3: Countries' code reconciliation
sqs_spi_country <- function(country) {
SPI_data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1_nQ9mQU_4J0KDRc4_TMzTsJHMYBqLwwnPaMC5BVhkGc/edit#gid=0")
SPI_country <- unique(SPI_data[, 1:2])
if (missing(country)) {
SPI_country
} else {
SPI_country[grep(country, SPI_country$countryName), ]
}
}
sqs_spi_country(country = "Canada")
sqs_spi_symbol(indicators = "mortality")
