maledummy,
systolicavg,
diastolicavg,
rightgrip,
leftgrip,
yrssincemigration,
monthlyincome,
smokerdummy,
marrydummy,
BMI,
workinsurance,
insuranceforfamilies
)
library(MASS)
set.seed(1)
library(tree)
set.seed(1)
train = sample(1:nrow(migrants2), nrow(migrants2) / 2)
tree.migrants2 = tree(daysmissedforsick ~ ., migrants2, subset = train)
summary(tree.migrants2)
plot(tree.migrants2)
(tree.migrants2,pretty=0)
yhat = predict(tree.migrants, newdata = migrants[-train,])
library(MASS)
set.seed(1)
library(tree)
set.seed(1)
train = sample(1:nrow(migrants), nrow(migrants)/2)
tree.migrants = tree(daysmissedforsick ~ ., migrants, subset=train)
summary(tree.migrants)
plot(tree.migrants)
text(tree.migrants,pretty=0)
cv.migrants = cv.tree(tree.migrants); cv.migrants
plot(cv.migrants$size, cv.migrants$dev,type='b')
prune.migrants = prune.tree(tree.migrants, best=3)
#summary(prune.migrants)
#cv.tree(tree.migrants,,prune.tree)$dev
plot(prune.migrants)
text(prune.migrants,pretty=0)
library(dplyr)
migrants2 <-
select(
migrants,
age,
reasonforhukouchange,
daysmissedforsick,
commercialinsurance,
publicinsurance,
ruralinsurance,
comprehensiveinsurance,
womenandchildinsurance,
immunizationinsurance,
otherinsurance,
yearsofeduc,
maledummy,
systolicavg,
diastolicavg,
rightgrip,
leftgrip,
yrssincemigration,
monthlyincome,
smokerdummy,
marrydummy,
BMI,
workinsurance,
insuranceforfamilies
)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, include = FALSE)
plot(cv.dataset$size, cv.dataset$dev,type='b')
dataset <- read.csv("./data/sourceDataFile.csv")
library(dplyr)
dataset <-
select(dataset, lngdppc3, va, ps, ge, rq, rl, cc, inv, gns, lninfl, govrev, govexp, fb, grossdebt, cab, ief, property, integrity, taxburden, govspend, busfreedom, labfreedom, monfreedom, tradefreedom, invfreedom, finfreedom, dcr, emplpop, schooling1, to, fdinet, secondenrol, tertenrol, lfp, schooling2, oldagedep, remittances, gci)
dataset <- read.csv("./data/sourceDataFile.csv")
library(dplyr)
dataset <-
select(dataset, lngdppc3, va, ps, ge, rq, rl, cc, inv, gns, lninfl, govrev, govexp, fb, grossdebt, cab, ief, property, integrity, taxburden, govspend, busfreedom, labfreedom, monfreedom, tradefreedom, invfreedom, finfreedom, dcr, emplpop, schooling1, to, fdinet, secondenrol, tertenrol, lfp, schooling2, oldagedep, remittances, gci)
library(data.table)
setDT(dataset)
dataset <- na.omit(dataset)
dataset[, lngdppc3_rec := 0]
dataset[lngdppc3>0 & lngdppc3<1, lngdppc3_rec := 1]
dataset[lngdppc3>=1 & lngdppc3<2, lngdppc3_rec := 2]
dataset[lngdppc3>=2 & lngdppc3<3, lngdppc3_rec := 3]
dataset[lngdppc3>=3 & lngdppc3<4, lngdppc3_rec := 4]
dataset[lngdppc3>=4 & lngdppc3<5, lngdppc3_rec := 5]
dataset[lngdppc3>=5 & lngdppc3<6, lngdppc3_rec := 6]
dataset[lngdppc3>=6 & lngdppc3<7, lngdppc3_rec := 7]
dataset[lngdppc3>7 & lngdppc3<8, lngdppc3_rec := 8]
dataset[lngdppc3>8 & lngdppc3<9, lngdppc3_rec := 9]
dataset[lngdppc3>=9 & lngdppc3<10, lngdppc3_rec := 10]
dataset[lngdppc3>=10, lngdppc3_rec := 11]
dataset$lngdppc3_rec <- factor(dataset$lngdppc3_rec)
attach(dataset)
va <- as.numeric(va)
ps <- as.numeric(ps)
ge <- as.numeric(ge)
rq <- as.numeric(rq)
rl <- as.numeric(rl)
cc <- as.numeric(cc)
inv <- as.numeric(inv)
gns <- as.numeric(gns)
lninfl <- as.numeric(lninfl)
govrev <- as.numeric(govrev)
govexp <- as.numeric(govexp)
fb <- as.numeric(fb)
#netdebt <- as.numeric(netdebt)
grossdebt <- as.numeric(grossdebt)
cab <- as.numeric(cab)
ief <- as.numeric(ief)
property <- as.numeric(property)
integrity <- as.numeric(integrity)
taxburden <- as.numeric(taxburden)
govspend <- as.numeric(govspend)
busfreedom <- as.numeric(busfreedom)
labfreedom <- as.numeric(labfreedom)
monfreedom <- as.numeric(monfreedom)
tradefreedom <- as.numeric(tradefreedom)
invfreedom <- as.numeric(invfreedom)
finfreedom <- as.numeric(finfreedom)
dcr <- as.numeric(dcr)
emplpop <- as.numeric(emplpop)
schooling1 <- as.numeric(schooling1)
to <- as.numeric(to)
fdinet <- as.numeric(fdinet)
secondenrol <- as.numeric(secondenrol)
tertenrol <- as.numeric(tertenrol)
lfp <- as.numeric(lfp)
schooling2 <- as.numeric(schooling2)
oldagedep <- as.numeric(oldagedep)
remittances <- as.numeric(remittances)
gci <- as.numeric(gci)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, include = FALSE)
set.seed(2)
ind = sample(2,
nrow(dataset),
replace = TRUE,
prob = c(0.7, 0.3))
trainset = dataset[ind == 1, ]
testset = dataset[ind == 2, ]
dim(dataset)
dim(trainset)
dim(testset)
library(MASS)
set.seed(1)
library(tree)
set.seed(1)
train = sample(1:nrow(dataset), nrow(dataset)/2)
tree.dataset = tree(lngdppc3 ~ ., dataset, subset=train)
summary(tree.dataset)
plot(tree.dataset)
text(tree.dataset,pretty=0)
plot(tree.dataset)
cv.dataset = cv.tree(tree.dataset); cv.dataset
plot(cv.dataset$size, cv.dataset$dev,type='b')
prune.dataset = prune.tree(tree.dataset, best=3)
#summary(prune.dataset)
#cv.tree(tree.dataset,,prune.tree)$dev
plot(prune.dataset)
text(prune.dataset,pretty=0)
prune.dataset = prune.tree(tree.dataset, best=3)
#summary(prune.dataset)
#cv.tree(tree.dataset,,prune.tree)$dev
plot(prune.dataset)
text(prune.dataset,pretty=0)
dev.copy(png, "graph1.png")
dev.off()
boost.dataset = gbm(lngdppc3_rec ~ .,data = dataset[train,], distribution="gaussian", n.trees=5000, interaction.depth=4, shrinkage=0.2, verbose=F)
boost.dataset = gbm(lngdppc3 ~ .,data = dataset[train,], distribution="gaussian", n.trees=5000, interaction.depth=4, shrinkage=0.2, verbose=F)
library(rgl)
comet <- readOBJ(url("http://sci.esa.int/science-e/www/object/doc.cfm?fobjectid=54726")) # may take some time to load
open3d()
## wgl
##   1
rgl.bg(color = c("black"))
shade3d(comet, col = ("gray"))
movie3d(spin3d(axis = c(0, 0, 1)), duration = 12, dir = getwd())
## Writing 'movie000.png'
## Writing 'movie001.png'
## Writing 'movie002.png'
## Writing 'movie003.png'
[...]
# Load packages
library(shiny)
library(shinythemes)
library(dplyr)
library(readr)
# Load data
trend_data <- read_csv("data/trend_data.csv")
trend_description <- read_csv("data/trend_description.csv")
# Define UI
ui <- fluidPage(theme = shinytheme("lumen"),
titlePanel("Google Trend Index"),
sidebarLayout(
sidebarPanel(
# Select type of trend to plot
selectInput(inputId = "type", label = strong("Trend index"),
choices = unique(trend_data$type),
selected = "Travel"),
# Select date range to be plotted
dateRangeInput("date", strong("Date range"), start = "2007-01-01", end = "2017-07-31",
min = "2007-01-01", max = "2017-07-31"),
# Select whether to overlay smooth trend line
checkboxInput(inputId = "smoother", label = strong("Overlay smooth trend line"), value = FALSE),
# Display only if the smoother is checked
conditionalPanel(condition = "input.smoother == true",
sliderInput(inputId = "f", label = "Smoother span:",
min = 0.01, max = 1, value = 0.67, step = 0.01,
animate = animationOptions(interval = 100)),
HTML("Higher values give more smoothness.")
)
),
# Output: Description, lineplot, and reference
mainPanel(
plotOutput(outputId = "lineplot", height = "300px"),
textOutput(outputId = "desc"),
tags$a(href = "https://www.google.com/finance/domestic_trends", "Source: Google Domestic Trends", target = "_blank")
)
)
)
# Define server function
server <- function(input, output) {
# Subset data
selected_trends <- reactive({
req(input$date)
validate(need(!is.na(input$date[1]) & !is.na(input$date[2]), "Error: Please provide both a start and an end date."))
validate(need(input$date[1] < input$date[2], "Error: Start date should be earlier than end date."))
trend_data %>%
filter(
type == input$type,
date > as.POSIXct(input$date[1]) & date < as.POSIXct(input$date[2]
))
})
# Create scatterplot object the plotOutput function is expecting
output$lineplot <- renderPlot({
color = "#434343"
par(mar = c(4, 4, 1, 1))
plot(x = selected_trends()$date, y = selected_trends()$close, type = "l",
xlab = "Date", ylab = "Trend index", col = color, fg = color, col.lab = color, col.axis = color)
# Display only if smoother is checked
if(input$smoother){
smooth_curve <- lowess(x = as.numeric(selected_trends()$date), y = selected_trends()$close, f = input$f)
lines(smooth_curve, col = "#E6553A", lwd = 3)
}
})
# Pull in description of trend
output$desc <- renderText({
trend_text <- filter(trend_description, type == input$type) %>% pull(text)
paste(trend_text, "The index is set to 1.0 on January 1, 2004 and is calculated only for US search traffic.")
})
}
# Create Shiny object
shinyApp(ui = ui, server = server)
library(nlme, lib.loc = "/usr/lib/R/library")
remove.packages("nlme", lib="/usr/lib/R/library")
library(nlme, lib.loc = "/usr/lib/R/library")
q()
library(lattice, lib.loc = "/usr/lib/R/library")
library(lattice)
library(lattice, lib.loc = "/usr/lib/R/library")
detach("package:lattice", unload = TRUE)
library(lattice, lib.loc = "/usr/lib/R/library")
setwd("~/mondo/mondoProduction/livres/afedR")
afedR::afedR_get_gook_files()
afedR::afedR_get_book_files()
getwd)
getwd()
mydir = getwd()
afedR::afedR_get_book_files(mydir)
usethis::use_readme_rmd()
usethis::use_readme_rmd(mydir)
library(quantmod)
mydata <- getSymbols("IBM",src="yahoo", from="2018-05-25", to="2018-05-26")
mydata
head(mydata)
dailyReturn(IBM)
barChart(mydata)
barChart(IBM)
library(WHO)
listOfAllCodes <- get_codes()
listOfAllCodes
idh
View(listOfAllCodes)
View(listOfAllCodes)
idh <- get_data("CCO_2")
idh
idh <- filter(idh, value < "20")
idh
idh
idh <- filter(idh, value < "20")
View(idh)
idh[value<20]
library(data.table)
setDT(idh)idh[value<20]
idh <- filter(idh, value < "20")
setDT(idh)
idh[value<20]
idh<- idh[value<20]
setwd("~/FlexyFlex Nikita")
library(flexdashboard)
library(readr)
graf <- read_csv("plEGUSECOMMFOZS.csv")
graf$X1 <- NULL
graf$`ISO code` <- NULL
library(dplyr)
graf2 <-filter (graf, Country == "Poland")
graf2 <-filter (graf2, Year >=1990)
library(readr)
farg <- read_csv("plEGUSECOMMCLZS.csv")
farg$X1 <- NULL
farg$`ISO code` <- NULL
library(dplyr)
farg2 <-filter (farg, Country == "Poland")
farg2 <-filter (farg2, Year >=1990)
graf3 <- left_join(graf2, farg2, by= "Year")
graf3$Country.y <- NULL
graf3 <- rename(graf3, Country = Country.x)
graf3$Indicator.x <- NULL
graf3$Indicator.y <- NULL
graf3 <-rename(graf3, "Fossil fuel energy consumption (% of total)" = Value.x)
graf3 <-rename(graf3, "	Alternative and nuclear energy (% of total energy use)" = Value.y)
View(graf3)
library(flexdashboard)
library(readr)
graf <- read_csv("plEGUSECOMMFOZS.csv")
graf$X1 <- NULL
graf$`ISO code` <- NULL
library(dplyr)
graf2 <-filter (graf, Country == "Poland")
graf2 <-filter (graf2, Year >=1990)
library(readr)
farg <- read_csv("plEGUSECOMMCLZS.csv")
farg$X1 <- NULL
farg$`ISO code` <- NULL
library(dplyr)
farg2 <-filter (farg, Country == "Poland")
farg2 <-filter (farg2, Year >=1990)
graf3 <- left_join(graf2, farg2, by= "Year")
graf3$Country.y <- NULL
graf3 <- rename(graf3, Country = Country.x)
graf3$Indicator.x <- NULL
graf3$Indicator.y <- NULL
graf3 <-rename(graf3, "Fuel" = Value.x)
graf3 <-rename(graf3, "	Alternative" = Value.y)
library(ggplot2)
ggplot(graf3, aes(x=Year,y=Fuel,group=Alternative,fill=Alternative)) +
geom_bar(stat="identity",position="dodge")
graf3 <- left_join(graf2, farg2, by= "Year")
graf3$Country.y <- NULL
graf3 <- rename(graf3, Country = Country.x)
graf3$Indicator.x <- NULL
graf3$Indicator.y <- NULL
graf3 <-rename(graf3, "Fuel" = Value.x)
graf3 <-rename(graf3, "	Alternative" = Value.y)
library(ggplot2)
ggplot(graf3, aes(x=Year,y=Fuel,group=Alternative,fill=Alternative)) +
geom_bar(stat="identity",position="dodge")
library(flexdashboard)
library(readr)
graf <- read_csv("plEGUSECOMMFOZS.csv")
graf$X1 <- NULL
graf$`ISO code` <- NULL
library(dplyr)
graf2 <-filter (graf, Country == "Poland")
graf2 <-filter (graf2, Year >=1990)
library(readr)
farg <- read_csv("plEGUSECOMMCLZS.csv")
farg$X1 <- NULL
farg$`ISO code` <- NULL
library(dplyr)
farg2 <-filter (farg, Country == "Poland")
farg2 <-filter (farg2, Year >=1990)
graf3 <- left_join(graf2, farg2, by= "Year")
graf3$Country.y <- NULL
graf3 <- rename(graf3, Country = Country.x)
graf3$Indicator.x <- NULL
graf3$Indicator.y <- NULL
graf3 <-rename(graf3, "Fuel" = Value.x)
graf3 <-rename(graf3, "	Alternative" = Value.y)
library(ggplot2)
ggplot(graf3, aes(x=Year,y=Fuel,group=Alternative,fill=Alternative)) +
geom_bar(stat="identity",position="dodge")
esquisse:::esquisser()
blogdown:::insert_image_addin()
qnorm(0.9, 1000, 20)
qnorm(0.9, 1000, 15)
0.15*(1/1)+0.25*(2/2)+0.25*(3/3)+0.15*(4/4)+0.10*(4/5
q
0.15*(1/1)+0.25*(2/2)+0.25*(3/3)+0.15*(4/4)+0.10*(4/5)
2403250
240/250
qnomr(0.98)
qnorm(0.98)
qnorm(0.98,100,20)
qnorm(0.98,100,10)
qnorm(0.89)
qnorm(0.98)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
chinaIDH = data_frame(Year = c(2017,2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006,2005,2004,2003,2002,2001,2000,1999,1998,1997,1996,1995,1994,1993,1992,1991,1990), Value = c(0.752,0.748,0.743,0.738,0.729,0.722,0.714,0.706,0.694,0.685,0.675,0.661,0.647,0.635,0.623,0.611,0.602,0.594,0.585,0.576,0.568,0.559,0.550,0.541,0.531,0.521,0.510,0.502))
library(ggplot2)
library(gganimate)
library(hrbrthemes)
chinagraph4 =
chinaIDH %>% ggplot( aes(x=Year, y=Value)) +
geom_line() +
geom_point() +
theme_ft_rc()+
transition_reveal(Year)
chinagraph4
library(dplyr)
chinaIDH = data_frame(Year = c(2017,2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006,2005,2004,2003,2002,2001,2000,1999,1998,1997,1996,1995,1994,1993,1992,1991,1990), Value = c(0.752,0.748,0.743,0.738,0.729,0.722,0.714,0.706,0.694,0.685,0.675,0.661,0.647,0.635,0.623,0.611,0.602,0.594,0.585,0.576,0.568,0.559,0.550,0.541,0.531,0.521,0.510,0.502))
library(ggplot2)
library(gganimate)
library(hrbrthemes)
chinagraph4 =
chinaIDH %>% ggplot( aes(x=Year, y=Value)) +
geom_line() +
geom_point() +
theme_ft_rc()+
transition_reveal(Year)
chinagraph4
library(dplyr)
chinaIDH = tibble(Year = c(2017,2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006,2005,2004,2003,2002,2001,2000,1999,1998,1997,1996,1995,1994,1993,1992,1991,1990), Value = c(0.752,0.748,0.743,0.738,0.729,0.722,0.714,0.706,0.694,0.685,0.675,0.661,0.647,0.635,0.623,0.611,0.602,0.594,0.585,0.576,0.568,0.559,0.550,0.541,0.531,0.521,0.510,0.502))
library(ggplot2)
library(gganimate)
library(hrbrthemes)
chinagraph4 =
chinaIDH %>% ggplot( aes(x=Year, y=Value)) +
geom_line() +
geom_point() +
theme_ft_rc()+
transition_reveal(Year)
chinagraph4
qnorm(.85,58,4)
qnorm(.47,28,5)
qnorm(.975)
qnorm(.85,58,4)
qnorm(.975,58,4)
wordcountaddin:::text_stats()
wordcountaddin:::text_stats()
setwd("~/mondo/mondoProduction/skemalab/blog")
library(distill)
create_post()
create_post('appsdashboards')
knitr::opts_chunk$set(echo = FALSE)
library(tidyquant)
library(tidyverse)
library(ggrepel)
data_apps <- tribble(
~application,  ~business_capability, ~ease_of_learning, ~trend, ~cost,
"R Shiny",     10,                   5,                 10,     "Free",
"Python Dash", 8,                    4,                 10,     "Free",
"Excel",       4,                    10,                7,      "Low",
"Tableau",     6,                    7,                 6,      "Low",
"PowerBI",     5,                    8,                 6,      "Low",
"Matlab",      6,                    2,                 1,      "High",
"SAS",         7,                    4,                 3,      "High"
)
data_apps %>%
ggplot(aes(x = business_capability, y = ease_of_learning,
color = cost, size = trend)) +
geom_point() +
geom_label_repel(aes(label = application, fill = application),
size = 3.5,
fontface = 'bold', color = 'white',
box.padding = 0.1, point.padding = 0.5,
segment.color = 'grey50', segment.size = 1) +
geom_smooth(color = palette_dark()[[1]], method = "lm", se = FALSE, show.legend = F) +
expand_limits(x = c(0, 10), y = c(0, 10)) +
theme_tq() +
theme(
legend.direction = "vertical",
legend.position  = "right",
legend.title = element_text(size = 8),
legend.text  = element_text(size = 8)
) +
scale_fill_tq() +
scale_color_tq() +
scale_y_continuous(breaks = seq(0, 10, 2)) +
scale_x_continuous(breaks = 0:10) +
scale_size_continuous(range = c(2, 14)) +
labs(title = "Dashboard and Business Application Tools",
subtitle = "R has a longer learning curve but has a massive business capability rating",
x     = "Business Capability Rating (10 = Powerful)",
y     = "Learning Curve (10 = Easy to Learn)",
color = "Cost",
size  = "Trend",
fill  = "Tool")
render_site()
distill::render_site()
create_post()
create_post("appsanddashboards")
setwd("~/mondo/mondoProduction/skemalab/blog")
library(distill)
library(rmarkdown)
render_site()
render_site()
render_site()
render_site()
render_site()
setwd("~/mondo/mondoProduction/skemalab/blog")
create_post("dashboards_apps")
setwd("~/mondo/mondoProduction/skemalab/blog/_site/posts/2020-02-25-shapefile/shapefiles")
setwd("~/mondo/mondoProduction/skemalab/blog/_site/posts/2020-02-25-shapefile/shapefiles/franceDepartments")
zip(zipfile, files=c("departements-20180101.cpg","departements-20180101.shp"), flags = "-r9X", extras = "", zip = Sys.getenv("R_ZIPCMD", "zip"))
utils::zip(zipfile, files=c("departements-20180101.cpg","departements-20180101.shp"), flags = "-r9X", extras = "", zip = Sys.getenv("R_ZIPCMD", "zip"))
utils::zip(zipfile = "./essai.zip", files=c("departements-20180101.cpg","departements-20180101.shp"), flags = "-r9X", extras = "", zip = Sys.getenv("R_ZIPCMD", "zip"))
Factoshiny()
questionr:::irec()
radiant.update:::radiant.update()
install.packages(c("DiagrammeR", "gitgadget", "htmltools", "radiant", "radiant.basics", "radiant.data", "radiant.design", "radiant.model", "radiant.multivariate", "radiant.update", "clustMixType", "pageviews", "randomizr", "RhpcBLASctl"), lib = "/usr/local/lib/R/site-library", repos = "https://radiant-rstats.github.io/minicran/", type = "source")
